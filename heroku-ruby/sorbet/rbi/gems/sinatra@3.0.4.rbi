# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sinatra` gem.
# Please instead update this file by running `bin/tapioca gem sinatra`.

class Rack::CommonLogger
  # source://rack/2.2.4/lib/rack/common_logger.rb#24
  def initialize(app, logger = T.unsafe(nil)); end

  # source://sinatra//lib/sinatra/base.rb#259
  def call(env); end

  # source://rack/2.2.4/lib/rack/common_logger.rb#36
  def call_without_check(env); end

  private

  # source://rack/2.2.4/lib/rack/common_logger.rb#78
  def extract_content_length(headers); end

  # source://rack/2.2.4/lib/rack/common_logger.rb#47
  def log(env, status, header, began_at); end
end

# source://rack/2.2.4/lib/rack/common_logger.rb#18
Rack::CommonLogger::FORMAT = T.let(T.unsafe(nil), String)

module Sinatra
  class << self
    # Include the helper modules provided in Sinatra's request context.
    #
    # source://sinatra//lib/sinatra/base.rb#2023
    def helpers(*extensions, &block); end

    # Create a new Sinatra application; the block is evaluated in the class scope.
    #
    # source://sinatra//lib/sinatra/base.rb#2011
    def new(base = T.unsafe(nil), &block); end

    # Extend the top-level DSL with the modules provided.
    #
    # source://sinatra//lib/sinatra/base.rb#2018
    def register(*extensions, &block); end

    # Use the middleware for classic applications.
    #
    # source://sinatra//lib/sinatra/base.rb#2028
    def use(*args, &block); end
  end
end

# Execution context for classic style (top-level) applications. All
# DSL methods executed on main are delegated to this class.
#
# The Application class should not be subclassed, unless you want to
# inherit all settings, routes, handlers, and error pages from the
# top-level. Subclassing Sinatra::Base is highly recommended for
# modular applications.
class Sinatra::Application < ::Sinatra::Base
  class << self
    # source://sinatra//lib/sinatra/base.rb#1282
    def app_file; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def app_file=(val); end

    def app_file?; end

    # source://sinatra//lib/sinatra/base.rb#1946
    def logging; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def logging=(val); end

    def logging?; end
    def method_override; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def method_override=(val); end

    def method_override?; end

    # source://sinatra//lib/sinatra/base.rb#1951
    def register(*extensions, &block); end

    # source://sinatra//lib/sinatra/main.rb#36
    def run; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def run=(val); end

    def run?; end
  end
end

class Sinatra::BadRequest < ::Sinatra::Error
  # source://sinatra//lib/sinatra/base.rb#270
  def http_status; end
end

# Base class for all Sinatra applications and middleware.
class Sinatra::Base
  include ::Rack::Utils
  include ::Sinatra::Helpers
  include ::Sinatra::Templates

  # @return [Base] a new instance of Base
  # @yield [_self]
  # @yieldparam _self [Sinatra::Base] the object that the method was called on
  #
  # source://sinatra//lib/sinatra/base.rb#918
  def initialize(app = T.unsafe(nil), **_kwargs); end

  # Returns the value of attribute app.
  #
  # source://sinatra//lib/sinatra/base.rb#915
  def app; end

  # Sets the attribute app
  #
  # @param value the value to set the attribute app to.
  #
  # source://sinatra//lib/sinatra/base.rb#915
  def app=(_arg0); end

  # Rack call interface.
  #
  # source://sinatra//lib/sinatra/base.rb#927
  def call(env); end

  # source://sinatra//lib/sinatra/base.rb#931
  def call!(env); end

  # Returns the value of attribute env.
  #
  # source://sinatra//lib/sinatra/base.rb#915
  def env; end

  # Sets the attribute env
  #
  # @param value the value to set the attribute env to.
  #
  # source://sinatra//lib/sinatra/base.rb#915
  def env=(_arg0); end

  # Forward the request to the downstream app -- middleware only.
  #
  # source://sinatra//lib/sinatra/base.rb#978
  def forward; end

  # Exit the current block, halts any further processing
  # of the request, and returns the specified response.
  #
  # source://sinatra//lib/sinatra/base.rb#965
  def halt(*response); end

  # Returns the value of attribute params.
  #
  # source://sinatra//lib/sinatra/base.rb#915
  def params; end

  # Sets the attribute params
  #
  # @param value the value to set the attribute params to.
  #
  # source://sinatra//lib/sinatra/base.rb#915
  def params=(_arg0); end

  # Pass control to the next matching route.
  # If there are no more matching routes, Sinatra will
  # return a 404 response.
  #
  # source://sinatra//lib/sinatra/base.rb#973
  def pass(&block); end

  # Returns the value of attribute request.
  #
  # source://sinatra//lib/sinatra/base.rb#915
  def request; end

  # Sets the attribute request
  #
  # @param value the value to set the attribute request to.
  #
  # source://sinatra//lib/sinatra/base.rb#915
  def request=(_arg0); end

  # Returns the value of attribute response.
  #
  # source://sinatra//lib/sinatra/base.rb#915
  def response; end

  # Sets the attribute response
  #
  # @param value the value to set the attribute response to.
  #
  # source://sinatra//lib/sinatra/base.rb#915
  def response=(_arg0); end

  # Access settings defined with Base.set.
  #
  # source://sinatra//lib/sinatra/base.rb#959
  def settings; end

  # Returns the value of attribute template_cache.
  #
  # source://sinatra//lib/sinatra/base.rb#916
  def template_cache; end

  private

  # Dispatch a request with error handling.
  #
  # source://sinatra//lib/sinatra/base.rb#1114
  def dispatch!; end

  # source://sinatra//lib/sinatra/base.rb#1206
  def dump_errors!(boom); end

  # Find an custom error block for the key(s) specified.
  #
  # source://sinatra//lib/sinatra/base.rb#1187
  def error_block!(key, *block_params); end

  # Run filters defined on the class and all superclasses.
  # Accepts an optional block to call after each filter is applied.
  #
  # source://sinatra//lib/sinatra/base.rb#992
  def filter!(type, base = T.unsafe(nil), &block); end

  # source://sinatra//lib/sinatra/base.rb#1809
  def force_encoding(*args); end

  # Error handling during requests.
  #
  # source://sinatra//lib/sinatra/base.rb#1141
  def handle_exception!(boom); end

  # Run the block with 'throw :halt' support and apply result to the response.
  #
  # source://sinatra//lib/sinatra/base.rb#1098
  def invoke(&block); end

  # If the current request matches pattern and conditions, fill params
  # with keys and call the given block.
  # Revert params afterwards.
  #
  # Returns pass block.
  #
  # source://sinatra//lib/sinatra/base.rb#1035
  def process_route(pattern, conditions, block = T.unsafe(nil), values = T.unsafe(nil)); end

  # Run routes defined on the class and all superclasses.
  #
  # source://sinatra//lib/sinatra/base.rb#1001
  def route!(base = T.unsafe(nil), pass_block = T.unsafe(nil)); end

  # Run a route block and throw :halt with the result.
  #
  # source://sinatra//lib/sinatra/base.rb#1026
  def route_eval; end

  # No matching route was found or all routes passed. The default
  # implementation is to forward the request downstream when running
  # as middleware (@app is non-nil); when no downstream app is set, raise
  # a NotFound exception. Subclasses can override this method to perform
  # custom route miss logic.
  #
  # @raise [NotFound]
  #
  # source://sinatra//lib/sinatra/base.rb#1073
  def route_missing; end

  # Attempt to serve static files from public directory. Throws :halt when
  # a matching file is found, returns nil otherwise.
  #
  # source://sinatra//lib/sinatra/base.rb#1081
  def static!(options = T.unsafe(nil)); end

  class << self
    def absolute_redirects; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def absolute_redirects=(val); end

    def absolute_redirects?; end

    # source://sinatra//lib/sinatra/base.rb#1282
    def add_charset; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def add_charset=(val); end

    def add_charset?; end

    # add a filter
    #
    # source://sinatra//lib/sinatra/base.rb#1407
    def add_filter(type, path = T.unsafe(nil), **options, &block); end

    # Define an after filter; runs after all requests within the same
    # context as route handlers and may access/modify the request and
    # response.
    #
    # source://sinatra//lib/sinatra/base.rb#1402
    def after(path = T.unsafe(nil), **options, &block); end

    def app_file; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def app_file=(val); end

    def app_file?; end

    # Define a before filter; runs before all requests within the same
    # context as route handlers and may access/modify the request and
    # response.
    #
    # source://sinatra//lib/sinatra/base.rb#1395
    def before(path = T.unsafe(nil), **options, &block); end

    # source://sinatra//lib/sinatra/base.rb#1851
    def bind; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def bind=(val); end

    def bind?; end

    # Creates a Rack::Builder instance with all the middleware set up and
    # the given +app+ as end point.
    #
    # source://sinatra//lib/sinatra/base.rb#1552
    def build(app); end

    # source://sinatra//lib/sinatra/base.rb#1560
    def call(env); end

    # Like Kernel#caller but excluding certain magic entries and without
    # line / method information; the resulting array contains filenames only.
    #
    # source://sinatra//lib/sinatra/base.rb#1566
    def caller_files; end

    # Add a route condition. The route is considered non-matching when the
    # block returns false.
    #
    # source://sinatra//lib/sinatra/base.rb#1413
    def condition(name = T.unsafe(nil), &block); end

    # Set configuration options for Sinatra and/or the app.
    # Allows scoping of settings for certain environments.
    #
    # @yield [_self]
    # @yieldparam _self [Sinatra::Base] the object that the method was called on
    #
    # source://sinatra//lib/sinatra/base.rb#1480
    def configure(*envs); end

    # source://sinatra//lib/sinatra/base.rb#1282
    def default_content_type; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def default_content_type=(val); end

    def default_content_type?; end

    # source://sinatra//lib/sinatra/base.rb#1282
    def default_encoding; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def default_encoding=(val); end

    def default_encoding?; end

    # source://sinatra//lib/sinatra/base.rb#1444
    def delete(path, opts = T.unsafe(nil), &block); end

    # @return [Boolean]
    #
    # source://sinatra//lib/sinatra/base.rb#1474
    def development?; end

    # Same as calling `set :option, false` for each of the given options.
    #
    # source://sinatra//lib/sinatra/base.rb#1308
    def disable(*opts); end

    # source://sinatra//lib/sinatra/base.rb#1817
    def dump_errors; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def dump_errors=(val); end

    def dump_errors?; end
    def empty_path_info; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def empty_path_info=(val); end

    def empty_path_info?; end

    # Same as calling `set :option, true` for each of the given options.
    #
    # source://sinatra//lib/sinatra/base.rb#1303
    def enable(*opts); end

    def environment; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def environment=(val); end

    def environment?; end

    # Define a custom error handler. Optionally takes either an Exception
    # class, or an HTTP status code to specify which errors should be
    # handled.
    #
    # source://sinatra//lib/sinatra/base.rb#1315
    def error(*codes, &block); end

    # Returns the value of attribute errors.
    #
    # source://sinatra//lib/sinatra/base.rb#1222
    def errors; end

    # Extension modules registered on this class and all superclasses.
    #
    # source://sinatra//lib/sinatra/base.rb#1243
    def extensions; end

    # Returns the value of attribute filters.
    #
    # source://sinatra//lib/sinatra/base.rb#1222
    def filters; end

    # Force data to specified encoding. It defaults to settings.default_encoding
    # which is UTF-8 by default
    #
    # source://sinatra//lib/sinatra/base.rb#1796
    def force_encoding(data, encoding = T.unsafe(nil)); end

    # Defining a `GET` handler also automatically defines
    # a `HEAD` handler.
    #
    # source://sinatra//lib/sinatra/base.rb#1432
    def get(path, opts = T.unsafe(nil), &block); end

    def handler_name; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def handler_name=(val); end

    def handler_name?; end

    # source://sinatra//lib/sinatra/base.rb#1446
    def head(path, opts = T.unsafe(nil), &block); end

    # Makes the methods defined in the block and in the Modules given
    # in `extensions` available to the handlers and templates
    #
    # source://sinatra//lib/sinatra/base.rb#1458
    def helpers(*extensions, &block); end

    # Load embedded templates from the file; uses the caller's __FILE__
    # when no file is specified.
    #
    # source://sinatra//lib/sinatra/base.rb#1341
    def inline_templates=(file = T.unsafe(nil)); end

    # Define the layout template. The block must return the template source.
    #
    # source://sinatra//lib/sinatra/base.rb#1335
    def layout(name = T.unsafe(nil), &block); end

    # source://sinatra//lib/sinatra/base.rb#1452
    def link(path, opts = T.unsafe(nil), &block); end

    def lock; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def lock=(val); end

    def lock?; end
    def logging; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def logging=(val); end

    def logging?; end
    def method_override; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def method_override=(val); end

    def method_override?; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def methodoverride=(val); end

    def methodoverride?; end

    # Middleware used in this class and all superclasses.
    #
    # source://sinatra//lib/sinatra/base.rb#1252
    def middleware; end

    # Lookup or register a mime type in Rack's mime registry.
    #
    # source://sinatra//lib/sinatra/base.rb#1374
    def mime_type(type, value = T.unsafe(nil)); end

    # provides all mime types matching type, including deprecated types:
    #   mime_types :html # => ['text/html']
    #   mime_types :js   # => ['application/javascript', 'text/javascript']
    #
    # source://sinatra//lib/sinatra/base.rb#1387
    def mime_types(type); end

    # source://sinatra//lib/sinatra/base.rb#1282
    def mustermann_opts; end

    # source://sinatra//lib/sinatra/base.rb#1290
    def mustermann_opts=(val); end

    def mustermann_opts?; end

    # Create a new instance of the class fronted by its middleware
    # pipeline. The object is guaranteed to respond to #call but may not be
    # an instance of the class new was called on.
    #
    # source://sinatra//lib/sinatra/base.rb#1544
    def new(*args, **_arg1, &block); end

    def new!(*_arg0); end

    # Sugar for `error(404) { ... }`
    #
    # source://sinatra//lib/sinatra/base.rb#1324
    def not_found(&block); end

    # source://sinatra//lib/sinatra/base.rb#1448
    def options(path, opts = T.unsafe(nil), &block); end

    # source://sinatra//lib/sinatra/base.rb#1450
    def patch(path, opts = T.unsafe(nil), &block); end

    def port; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def port=(val); end

    def port?; end

    # source://sinatra//lib/sinatra/base.rb#1442
    def post(path, opts = T.unsafe(nil), &block); end

    def prefixed_redirects; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def prefixed_redirects=(val); end

    def prefixed_redirects?; end

    # @return [Boolean]
    #
    # source://sinatra//lib/sinatra/base.rb#1475
    def production?; end

    def protection; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def protection=(val); end

    def protection?; end

    # The prototype instance used to process requests.
    #
    # source://sinatra//lib/sinatra/base.rb#1534
    def prototype; end

    # source://sinatra//lib/sinatra/base.rb#1417
    def public=(value); end

    # source://sinatra//lib/sinatra/base.rb#1426
    def public_dir; end

    # source://sinatra//lib/sinatra/base.rb#1422
    def public_dir=(value); end

    # source://sinatra//lib/sinatra/base.rb#1875
    def public_folder; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def public_folder=(val); end

    def public_folder?; end

    # source://sinatra//lib/sinatra/base.rb#1440
    def put(path, opts = T.unsafe(nil), &block); end

    def quiet; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def quiet=(val); end

    def quiet?; end

    # Stop the self-hosted server if running.
    #
    # source://sinatra//lib/sinatra/base.rb#1492
    def quit!; end

    # source://sinatra//lib/sinatra/base.rb#1816
    def raise_errors; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def raise_errors=(val); end

    def raise_errors?; end

    # Register an extension. Alternatively take a block from which an
    # extension will be created and registered on the fly.
    #
    # source://sinatra//lib/sinatra/base.rb#1465
    def register(*extensions, &block); end

    # source://sinatra//lib/sinatra/base.rb#1871
    def reload_templates; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def reload_templates=(val); end

    def reload_templates?; end

    # Removes all routes, filters, middleware and extension hooks from the
    # current class (not routes/filters/... defined by its superclass).
    #
    # source://sinatra//lib/sinatra/base.rb#1226
    def reset!; end

    # source://sinatra//lib/sinatra/base.rb#1869
    def root; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def root=(val); end

    def root?; end

    # Returns the value of attribute routes.
    #
    # source://sinatra//lib/sinatra/base.rb#1222
    def routes; end

    def run; end

    # Run the Sinatra app as a self-hosted server using
    # Puma, Falcon, Mongrel, or WEBrick (in that order). If given a block, will call
    # with the constructed handler once we have taken the stage.
    #
    # source://sinatra//lib/sinatra/base.rb#1507
    def run!(options = T.unsafe(nil), &block); end

    # source://sinatra//lib/sinatra/base.rb#1281
    def run=(val); end

    def run?; end

    # Check whether the self-hosted server is running or not.
    #
    # @return [Boolean]
    #
    # source://sinatra//lib/sinatra/base.rb#1529
    def running?; end

    def running_server; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def running_server=(val); end

    def running_server?; end

    # source://sinatra//lib/sinatra/base.rb#1282
    def server; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def server=(val); end

    def server?; end

    # source://sinatra//lib/sinatra/base.rb#1282
    def session_secret; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def session_secret=(val); end

    def session_secret?; end

    # source://sinatra//lib/sinatra/base.rb#1282
    def session_store; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def session_store=(val); end

    def session_store?; end
    def sessions; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def sessions=(val); end

    def sessions?; end

    # Sets an option to the given value.  If the value is a proc,
    # the proc will be called every time the option is accessed.
    #
    # @raise [ArgumentError]
    #
    # source://sinatra//lib/sinatra/base.rb#1262
    def set(option, value = T.unsafe(nil), ignore_setter = T.unsafe(nil), &block); end

    # Access settings defined with Base.set.
    #
    # source://sinatra//lib/sinatra/base.rb#954
    def settings; end

    # source://sinatra//lib/sinatra/base.rb#1818
    def show_exceptions; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def show_exceptions=(val); end

    def show_exceptions?; end

    # Run the Sinatra app as a self-hosted server using
    # Puma, Falcon, Mongrel, or WEBrick (in that order). If given a block, will call
    # with the constructed handler once we have taken the stage.
    #
    # source://sinatra//lib/sinatra/base.rb#1507
    def start!(options = T.unsafe(nil), &block); end

    # source://sinatra//lib/sinatra/base.rb#1876
    def static; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def static=(val); end

    def static?; end
    def static_cache_control; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def static_cache_control=(val); end

    def static_cache_control?; end

    # Stop the self-hosted server if running.
    #
    # source://sinatra//lib/sinatra/base.rb#1492
    def stop!; end

    def strict_paths; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def strict_paths=(val); end

    def strict_paths?; end

    # Define a named template. The block must return the template source.
    #
    # source://sinatra//lib/sinatra/base.rb#1329
    def template(name, &block); end

    # Returns the value of attribute templates.
    #
    # source://sinatra//lib/sinatra/base.rb#1222
    def templates; end

    # @return [Boolean]
    #
    # source://sinatra//lib/sinatra/base.rb#1476
    def test?; end

    def threaded; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def threaded=(val); end

    def threaded?; end
    def traps; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def traps=(val); end

    def traps?; end

    # source://sinatra//lib/sinatra/base.rb#1454
    def unlink(path, opts = T.unsafe(nil), &block); end

    # Use the specified Rack middleware
    #
    # source://sinatra//lib/sinatra/base.rb#1485
    def use(middleware, *args, **_arg2, &block); end

    def use_code; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def use_code=(val); end

    def use_code?; end

    # source://sinatra//lib/sinatra/base.rb#1870
    def views; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def views=(val); end

    def views?; end
    def x_cascade; end

    # source://sinatra//lib/sinatra/base.rb#1281
    def x_cascade=(val); end

    def x_cascade?; end

    private

    # Condition for matching user agent. Parameter should be Regexp.
    # Will set params[:agent].
    #
    # source://sinatra//lib/sinatra/base.rb#1626
    def agent(pattern); end

    # Like Kernel#caller but excluding certain magic entries
    #
    # source://sinatra//lib/sinatra/base.rb#1787
    def cleaned_caller(keep = T.unsafe(nil)); end

    # source://sinatra//lib/sinatra/base.rb#1697
    def compile(path, route_mustermann_opts = T.unsafe(nil)); end

    # source://sinatra//lib/sinatra/base.rb#1677
    def compile!(verb, path, block, **options); end

    # Dynamically defines a method on settings.
    #
    # source://sinatra//lib/sinatra/base.rb#1612
    def define_singleton(name, content = T.unsafe(nil)); end

    # source://sinatra//lib/sinatra/base.rb#1670
    def generate_method(method_name, &block); end

    # Condition for matching host name. Parameter might be String or Regexp.
    #
    # source://sinatra//lib/sinatra/base.rb#1620
    def host_name(pattern); end

    # @private
    #
    # source://sinatra//lib/sinatra/base.rb#1766
    def inherited(subclass); end

    # source://sinatra//lib/sinatra/base.rb#1666
    def invoke_hook(name, *args); end

    # Condition for matching mimetypes. Accepts file extensions.
    #
    # source://sinatra//lib/sinatra/base.rb#1639
    def provides(*types); end

    # source://sinatra//lib/sinatra/base.rb#1658
    def route(verb, path, options = T.unsafe(nil), &block); end

    # source://sinatra//lib/sinatra/base.rb#1728
    def setup_common_logger(builder); end

    # source://sinatra//lib/sinatra/base.rb#1732
    def setup_custom_logger(builder); end

    # source://sinatra//lib/sinatra/base.rb#1701
    def setup_default_middleware(builder); end

    # source://sinatra//lib/sinatra/base.rb#1715
    def setup_logging(builder); end

    # source://sinatra//lib/sinatra/base.rb#1711
    def setup_middleware(builder); end

    # source://sinatra//lib/sinatra/base.rb#1724
    def setup_null_logger(builder); end

    # source://sinatra//lib/sinatra/base.rb#1740
    def setup_protection(builder); end

    # source://sinatra//lib/sinatra/base.rb#1757
    def setup_sessions(builder); end

    # source://sinatra//lib/sinatra/base.rb#1596
    def setup_traps; end

    # Starts the server by running the Rack Handler.
    #
    # source://sinatra//lib/sinatra/base.rb#1573
    def start_server(handler, server_settings, handler_name); end

    # @return [Boolean]
    #
    # source://sinatra//lib/sinatra/base.rb#1592
    def suppress_messages?; end

    # source://sinatra//lib/sinatra/base.rb#1773
    def synchronize(&block); end

    # Condition for matching user agent. Parameter should be Regexp.
    # Will set params[:agent].
    #
    # source://sinatra//lib/sinatra/base.rb#1626
    def user_agent(pattern); end

    # used for deprecation warnings
    #
    # source://sinatra//lib/sinatra/base.rb#1782
    def warn_for_deprecation(message); end
  end
end

# source://sinatra//lib/sinatra/base.rb#913
Sinatra::Base::URI_INSTANCE = T.let(T.unsafe(nil), URI::RFC2396_Parser)

# Behaves exactly like Rack::CommonLogger with the notable exception that it does nothing,
# if another CommonLogger is already in the middleware chain.
class Sinatra::CommonLogger < ::Rack::CommonLogger
  # source://sinatra//lib/sinatra/base.rb#253
  def call(env); end
end

# Sinatra delegation mixin. Mixing this module into an object causes all
# methods to be delegated to the Sinatra::Application class. Used primarily
# at the top-level.
module Sinatra::Delegator
  private

  # source://sinatra//lib/sinatra/base.rb#1964
  def after(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def before(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def configure(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def delete(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def development?(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def disable(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def enable(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def error(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def get(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def head(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def helpers(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def layout(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def link(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def mime_type(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def not_found(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def options(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def patch(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def post(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def production?(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def put(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def register(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def set(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def settings(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def template(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def test?(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def unlink(*args, **_arg1, &block); end

  # source://sinatra//lib/sinatra/base.rb#1964
  def use(*args, **_arg1, &block); end

  class << self
    # source://sinatra//lib/sinatra/base.rb#1962
    def delegate(*methods); end

    # Returns the value of attribute target.
    #
    # source://sinatra//lib/sinatra/base.rb#1981
    def target; end

    # Sets the attribute target
    #
    # @param value the value to set the attribute target to.
    #
    # source://sinatra//lib/sinatra/base.rb#1981
    def target=(_arg0); end
  end
end

class Sinatra::Error < ::StandardError; end

# Some Rack handlers (Rainbows!) implement an extended body object protocol, however,
# some middleware (namely Rack::Lint) will break it by not mirroring the methods in question.
# This middleware will detect an extended body object and will make sure it reaches the
# handler directly. We do this here, so our middleware and middleware set up by the app will
# still be able to run.
class Sinatra::ExtendedRack < ::Struct
  # source://sinatra//lib/sinatra/base.rb#218
  def call(env); end

  private

  # @raise [NotImplementedError]
  #
  # source://sinatra//lib/sinatra/base.rb#237
  def after_response(&block); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#243
  def async?(status, _headers, body); end

  # source://sinatra//lib/sinatra/base.rb#230
  def setup_close(env, _status, _headers, body); end
end

# Methods available to routes, before/after filters, and views.
module Sinatra::Helpers
  # Set the Content-Disposition to "attachment" with the specified filename,
  # instructing the user agents to prompt to save.
  #
  # source://sinatra//lib/sinatra/base.rb#408
  def attachment(filename = T.unsafe(nil), disposition = T.unsafe(nil)); end

  # Sugar for redirect (example:  redirect back)
  #
  # source://sinatra//lib/sinatra/base.rb#635
  def back; end

  # whether or not the status is set to 400
  #
  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#670
  def bad_request?; end

  # Set or retrieve the response body. When a block is given,
  # evaluation is deferred until the body is read with #each.
  #
  # source://sinatra//lib/sinatra/base.rb#287
  def body(value = T.unsafe(nil), &block); end

  # Specify response freshness policy for HTTP caches (Cache-Control header).
  # Any number of non-value directives (:public, :private, :no_cache,
  # :no_store, :must_revalidate, :proxy_revalidate) may be passed along with
  # a Hash of value directives (:max_age, :s_maxage).
  #
  #   cache_control :public, :must_revalidate, :max_age => 60
  #   => Cache-Control: public, must-revalidate, max-age=60
  #
  # See RFC 2616 / 14.9 for more on standard cache control directives:
  # http://tools.ietf.org/html/rfc2616#section-14.9.1
  #
  # source://sinatra//lib/sinatra/base.rb#522
  def cache_control(*values); end

  # whether or not the status is set to 4xx
  #
  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#655
  def client_error?; end

  # Set the Content-Type of the response body given a media type or file
  # extension.
  #
  # source://sinatra//lib/sinatra/base.rb#377
  def content_type(type = T.unsafe(nil), params = T.unsafe(nil)); end

  # Halt processing and return the error status provided.
  #
  # source://sinatra//lib/sinatra/base.rb#340
  def error(code, body = T.unsafe(nil)); end

  # Set the response entity tag (HTTP 'ETag' header) and halt if conditional
  # GET matches. The +value+ argument is an identifier that uniquely
  # identifies the current version of the resource. The +kind+ argument
  # indicates whether the etag should be used as a :strong (default) or :weak
  # cache validator.
  #
  # When the current request includes an 'If-None-Match' header with a
  # matching etag, execution is immediately halted. If the request method is
  # GET or HEAD, a '304 Not Modified' response is sent.
  #
  # source://sinatra//lib/sinatra/base.rb#605
  def etag(value, options = T.unsafe(nil)); end

  # Set the Expires header and Cache-Control/max-age directive. Amount
  # can be an integer number of seconds in the future or a Time object
  # indicating when the response should be considered "stale". The remaining
  # "values" arguments are passed to the #cache_control helper:
  #
  #   expires 500, :public, :must_revalidate
  #   => Cache-Control: public, must-revalidate, max-age=500
  #   => Expires: Mon, 08 Jun 2009 08:50:17 GMT
  #
  # source://sinatra//lib/sinatra/base.rb#550
  def expires(amount, *values); end

  # Set multiple response headers with Hash.
  #
  # source://sinatra//lib/sinatra/base.rb#355
  def headers(hash = T.unsafe(nil)); end

  # whether or not the status is set to 1xx
  #
  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#640
  def informational?; end

  # Set the last modified time of the resource (HTTP 'Last-Modified' header)
  # and halt if conditional GET matches. The +time+ argument is a Time,
  # DateTime, or other object that responds to +to_time+.
  #
  # When the current request includes an 'If-Modified-Since' header that is
  # equal or later than the time specified, execution is immediately halted
  # with a '304 Not Modified' response.
  #
  # source://sinatra//lib/sinatra/base.rb#574
  def last_modified(time); end

  # Access shared logger object.
  #
  # source://sinatra//lib/sinatra/base.rb#366
  def logger; end

  # Look up a media type by file extension in Rack's mime registry.
  #
  # source://sinatra//lib/sinatra/base.rb#371
  def mime_type(type); end

  # Halt processing and return a 404 Not Found.
  #
  # source://sinatra//lib/sinatra/base.rb#350
  def not_found(body = T.unsafe(nil)); end

  # whether or not the status is set to 404
  #
  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#665
  def not_found?; end

  # Halt processing and redirect to the URI provided.
  #
  # source://sinatra//lib/sinatra/base.rb#304
  def redirect(uri, *args); end

  # whether or not the status is set to 3xx
  #
  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#650
  def redirect?; end

  # Use the contents of the file at +path+ as the response body.
  #
  # source://sinatra//lib/sinatra/base.rb#419
  def send_file(path, opts = T.unsafe(nil)); end

  # whether or not the status is set to 5xx
  #
  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#660
  def server_error?; end

  # Access the underlying Rack session.
  #
  # source://sinatra//lib/sinatra/base.rb#361
  def session; end

  # Set or retrieve the response status code.
  #
  # source://sinatra//lib/sinatra/base.rb#280
  def status(value = T.unsafe(nil)); end

  # Allows to start sending data to the client even though later parts of
  # the response body have not yet been generated.
  #
  # The close parameter specifies whether Stream#close should be called
  # after the block has been executed. This is only relevant for evented
  # servers like Rainbows.
  #
  # source://sinatra//lib/sinatra/base.rb#506
  def stream(keep_open = T.unsafe(nil)); end

  # whether or not the status is set to 2xx
  #
  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#645
  def success?; end

  # Generates a Time object from the given value.
  # Used by #expires and #last_modified.
  #
  # source://sinatra//lib/sinatra/base.rb#676
  def time_for(value); end

  # Generates the absolute URI for a given path in the app.
  # Takes Rack routers and reverse proxies into account.
  #
  # source://sinatra//lib/sinatra/base.rb#319
  def to(addr = T.unsafe(nil), absolute = T.unsafe(nil), add_script_name = T.unsafe(nil)); end

  # Generates the absolute URI for a given path in the app.
  # Takes Rack routers and reverse proxies into account.
  #
  # source://sinatra//lib/sinatra/base.rb#319
  def uri(addr = T.unsafe(nil), absolute = T.unsafe(nil), add_script_name = T.unsafe(nil)); end

  # Generates the absolute URI for a given path in the app.
  # Takes Rack routers and reverse proxies into account.
  #
  # source://sinatra//lib/sinatra/base.rb#319
  def url(addr = T.unsafe(nil), absolute = T.unsafe(nil), add_script_name = T.unsafe(nil)); end

  private

  # Helper method checking if a ETag value list includes the current ETag.
  #
  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#693
  def etag_matches?(list, new_resource = T.unsafe(nil)); end

  # source://sinatra//lib/sinatra/base.rb#699
  def with_params(temp_params); end
end

# source://sinatra//lib/sinatra/base.rb#595
Sinatra::Helpers::ETAG_KINDS = T.let(T.unsafe(nil), Array)

# https://html.spec.whatwg.org/#multipart-form-data
#
# source://sinatra//lib/sinatra/base.rb#400
Sinatra::Helpers::MULTIPART_FORM_DATA_REPLACEMENT_TABLE = T.let(T.unsafe(nil), Hash)

# Class of the response body in case you use #stream.
#
# Three things really matter: The front and back block (back being the
# block generating content, front the one sending it to the client) and
# the scheduler, integrating with whatever concurrency feature the Rack
# handler is using.
#
# Scheduler has to respond to defer and schedule.
class Sinatra::Helpers::Stream
  # @return [Stream] a new instance of Stream
  #
  # source://sinatra//lib/sinatra/base.rb#455
  def initialize(scheduler = T.unsafe(nil), keep_open = T.unsafe(nil), &back); end

  # source://sinatra//lib/sinatra/base.rb#482
  def <<(data); end

  # source://sinatra//lib/sinatra/base.rb#487
  def callback(&block); end

  # source://sinatra//lib/sinatra/base.rb#463
  def close; end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#495
  def closed?; end

  # source://sinatra//lib/sinatra/base.rb#470
  def each(&front); end

  # source://sinatra//lib/sinatra/base.rb#487
  def errback(&block); end

  class << self
    # source://sinatra//lib/sinatra/base.rb#453
    def defer(*_arg0); end

    # source://sinatra//lib/sinatra/base.rb#452
    def schedule(*_arg0); end
  end
end

# A poor man's ActiveSupport::HashWithIndifferentAccess, with all the Rails-y
# stuff removed.
#
# Implements a hash where keys <tt>:foo</tt> and <tt>"foo"</tt> are
# considered to be the same.
#
#   rgb = Sinatra::IndifferentHash.new
#
#   rgb[:black]    =  '#000000' # symbol assignment
#   rgb[:black]  # => '#000000' # symbol retrieval
#   rgb['black'] # => '#000000' # string retrieval
#
#   rgb['white']   =  '#FFFFFF' # string assignment
#   rgb[:white]  # => '#FFFFFF' # symbol retrieval
#   rgb['white'] # => '#FFFFFF' # string retrieval
#
# Internally, symbols are mapped to strings when used as keys in the entire
# writing interface (calling e.g. <tt>[]=</tt>, <tt>merge</tt>). This mapping
# belongs to the public interface. For example, given:
#
#   hash = Sinatra::IndifferentHash.new(:a=>1)
#
# You are guaranteed that the key is returned as a string:
#
#   hash.keys # => ["a"]
#
# Technically other types of keys are accepted:
#
#   hash = Sinatra::IndifferentHash.new(:a=>1)
#   hash[0] = 0
#   hash # => { "a"=>1, 0=>0 }
#
# But this class is intended for use cases where strings or symbols are the
# expected keys and it is convenient to understand both as the same. For
# example the +params+ hash in Sinatra.
class Sinatra::IndifferentHash < ::Hash
  # @return [IndifferentHash] a new instance of IndifferentHash
  #
  # source://sinatra//lib/sinatra/indifferent_hash.rb#44
  def initialize(*args); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#74
  def [](key); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#78
  def []=(key, value); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#60
  def assoc(key); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#185
  def compact; end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#50
  def default(*args); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#56
  def default=(value); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#102
  def delete(key); end

  # Added in Ruby 2.3
  #
  # source://sinatra//lib/sinatra/indifferent_hash.rb#107
  def dig(key, *other_keys); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#68
  def fetch(key, *args); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#111
  def fetch_values(*keys); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/indifferent_hash.rb#88
  def has_key?(key); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/indifferent_hash.rb#96
  def has_value?(value); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/indifferent_hash.rb#88
  def include?(key); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#84
  def key(value); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/indifferent_hash.rb#88
  def key?(key); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/indifferent_hash.rb#88
  def member?(key); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#147
  def merge(*other_hashes, &block); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#129
  def merge!(*other_hashes); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#64
  def rassoc(value); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#179
  def reject(*args, &block); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#151
  def replace(other_hash); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#173
  def select(*args, &block); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#117
  def slice(*keys); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#78
  def store(key, value); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#164
  def transform_keys(&block); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#168
  def transform_keys!; end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#155
  def transform_values(&block); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#159
  def transform_values!; end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#129
  def update(*other_hashes); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/indifferent_hash.rb#96
  def value?(value); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#123
  def values_at(*keys); end

  private

  # source://sinatra//lib/sinatra/indifferent_hash.rb#191
  def convert_key(key); end

  # source://sinatra//lib/sinatra/indifferent_hash.rb#195
  def convert_value(value); end

  class << self
    # source://sinatra//lib/sinatra/indifferent_hash.rb#40
    def [](*args); end
  end
end

class Sinatra::NotFound < ::Sinatra::Error
  # source://sinatra//lib/sinatra/base.rb#274
  def http_status; end
end

# The request object. See Rack::Request for more info:
# http://rubydoc.info/github/rack/rack/master/Rack/Request
class Sinatra::Request < ::Rack::Request
  # Returns an array of acceptable media types for the response
  #
  # source://sinatra//lib/sinatra/base.rb#28
  def accept; end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#40
  def accept?(type); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#58
  def forwarded?; end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#66
  def idempotent?; end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#70
  def link?; end

  # source://sinatra//lib/sinatra/base.rb#78
  def params; end

  # source://sinatra//lib/sinatra/base.rb#44
  def preferred_type(*types); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#62
  def safe?; end

  # source://rack/2.2.4/lib/rack/request.rb#350
  def secure?; end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#74
  def unlink?; end
end

class Sinatra::Request::AcceptEntry
  # @return [AcceptEntry] a new instance of AcceptEntry
  #
  # source://sinatra//lib/sinatra/base.rb#90
  def initialize(entry); end

  # source://sinatra//lib/sinatra/base.rb#103
  def <=>(other); end

  # Returns the value of attribute entry.
  #
  # source://sinatra//lib/sinatra/base.rb#88
  def entry; end

  # source://sinatra//lib/sinatra/base.rb#124
  def method_missing(*args, &block); end

  # Returns the value of attribute params.
  #
  # source://sinatra//lib/sinatra/base.rb#87
  def params; end

  # Sets the attribute params
  #
  # @param value the value to set the attribute params to.
  #
  # source://sinatra//lib/sinatra/base.rb#87
  def params=(_arg0); end

  # source://sinatra//lib/sinatra/base.rb#107
  def priority; end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#120
  def respond_to?(*args); end

  # source://sinatra//lib/sinatra/base.rb#116
  def to_s(full = T.unsafe(nil)); end

  # source://sinatra//lib/sinatra/base.rb#112
  def to_str; end
end

# source://sinatra//lib/sinatra/base.rb#24
Sinatra::Request::HEADER_PARAM = T.let(T.unsafe(nil), Regexp)

# source://sinatra//lib/sinatra/base.rb#25
Sinatra::Request::HEADER_VALUE_WITH_PARAMS = T.let(T.unsafe(nil), Regexp)

class Sinatra::Request::MimeTypeEntry
  # @return [MimeTypeEntry] a new instance of MimeTypeEntry
  #
  # source://sinatra//lib/sinatra/base.rb#132
  def initialize(entry); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#143
  def accepts?(entry); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#151
  def matches_params?(params); end

  # Returns the value of attribute params.
  #
  # source://sinatra//lib/sinatra/base.rb#130
  def params; end

  # source://sinatra//lib/sinatra/base.rb#147
  def to_str; end
end

# The response object. See Rack::Response and Rack::Response::Helpers for
# more info:
# http://rubydoc.info/github/rack/rack/master/Rack/Response
# http://rubydoc.info/github/rack/rack/master/Rack/Response/Helpers
class Sinatra::Response < ::Rack::Response
  # source://sinatra//lib/sinatra/base.rb#166
  def body=(value); end

  # source://sinatra//lib/sinatra/base.rb#171
  def each; end

  # source://sinatra//lib/sinatra/base.rb#175
  def finish; end

  private

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#199
  def calculate_content_length?; end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#207
  def drop_body?; end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/base.rb#203
  def drop_content_info?; end
end

# source://sinatra//lib/sinatra/base.rb#164
Sinatra::Response::DROP_BODY_RESPONSES = T.let(T.unsafe(nil), Array)

# Sinatra::ShowExceptions catches all exceptions raised from the app it
# wraps. It shows a useful backtrace with the sourcefile and clickable
# context, the whole Rack environment and the request data.
#
# Be careful when you use this on public-facing sites as it could reveal
# information helpful to attackers.
class Sinatra::ShowExceptions < ::Rack::ShowExceptions
  # @return [ShowExceptions] a new instance of ShowExceptions
  #
  # source://sinatra//lib/sinatra/show_exceptions.rb#18
  def initialize(app); end

  # source://sinatra//lib/sinatra/show_exceptions.rb#22
  def call(env); end

  # source://sinatra//lib/sinatra/show_exceptions.rb#48
  def template; end

  private

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/show_exceptions.rb#54
  def bad_request?(exception); end

  # source://sinatra//lib/sinatra/show_exceptions.rb#63
  def frame_class(frame); end

  # @return [Boolean]
  #
  # source://sinatra//lib/sinatra/show_exceptions.rb#58
  def prefers_plain_text?(env); end
end

# source://sinatra//lib/sinatra/show_exceptions.rb#74
Sinatra::ShowExceptions::TEMPLATE = T.let(T.unsafe(nil), ERB)

# Template rendering methods. Each method takes the name of a template
# to render as a Symbol and returns a String with the rendered output,
# as well as an optional hash with additional options.
#
# `template` is either the name or path of the template as symbol
# (Use `:'subdir/myview'` for views in subdirectories), or a string
# that will be rendered.
#
# Possible options are:
#   :content_type   The content type to use, same arguments as content_type.
#   :layout         If set to something falsy, no layout is rendered, otherwise
#                   the specified layout is used
#   :layout_engine  Engine to use for rendering the layout.
#   :locals         A hash with local variables that should be available
#                   in the template
#   :scope          If set, template is evaluate with the binding of the given
#                   object rather than the application instance.
#   :views          Views directory to use.
module Sinatra::Templates
  # source://sinatra//lib/sinatra/base.rb#731
  def initialize; end

  # source://sinatra//lib/sinatra/base.rb#763
  def asciidoc(template, options = T.unsafe(nil), locals = T.unsafe(nil)); end

  # source://sinatra//lib/sinatra/base.rb#745
  def builder(template = T.unsafe(nil), options = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  # source://sinatra//lib/sinatra/base.rb#737
  def erb(template, options = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  # Calls the given block for every possible template file in views,
  # named name.ext, where ext is registered on engine.
  #
  # @yield [::File.join(views, "#{name}.#{@preferred_extension}")]
  #
  # source://sinatra//lib/sinatra/base.rb#792
  def find_template(views, name, engine); end

  # source://sinatra//lib/sinatra/base.rb#741
  def haml(template, options = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  # source://sinatra//lib/sinatra/base.rb#750
  def liquid(template, options = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  # source://sinatra//lib/sinatra/base.rb#767
  def markaby(template = T.unsafe(nil), options = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  # source://sinatra//lib/sinatra/base.rb#754
  def markdown(template, options = T.unsafe(nil), locals = T.unsafe(nil)); end

  # source://sinatra//lib/sinatra/base.rb#771
  def nokogiri(template = T.unsafe(nil), options = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  # source://sinatra//lib/sinatra/base.rb#785
  def rabl(template, options = T.unsafe(nil), locals = T.unsafe(nil)); end

  # source://sinatra//lib/sinatra/base.rb#759
  def rdoc(template, options = T.unsafe(nil), locals = T.unsafe(nil)); end

  # source://sinatra//lib/sinatra/base.rb#776
  def slim(template, options = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  # source://sinatra//lib/sinatra/base.rb#780
  def yajl(template, options = T.unsafe(nil), locals = T.unsafe(nil)); end

  private

  # source://sinatra//lib/sinatra/base.rb#897
  def compile_block_template(template, options, &body); end

  # source://sinatra//lib/sinatra/base.rb#859
  def compile_template(engine, data, options, views); end

  # source://sinatra//lib/sinatra/base.rb#812
  def render(engine, data, options = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  # logic shared between builder and nokogiri
  #
  # source://sinatra//lib/sinatra/base.rb#803
  def render_ruby(engine, template, options = T.unsafe(nil), locals = T.unsafe(nil), &block); end
end

module Sinatra::Templates::ContentTyped
  # Returns the value of attribute content_type.
  #
  # source://sinatra//lib/sinatra/base.rb#728
  def content_type; end

  # Sets the attribute content_type
  #
  # @param value the value to set the attribute content_type to.
  #
  # source://sinatra//lib/sinatra/base.rb#728
  def content_type=(_arg0); end
end

# source://sinatra//lib/sinatra/version.rb#4
Sinatra::VERSION = T.let(T.unsafe(nil), String)

class Sinatra::Wrapper
  # @return [Wrapper] a new instance of Wrapper
  #
  # source://sinatra//lib/sinatra/base.rb#1988
  def initialize(stack, instance); end

  # source://sinatra//lib/sinatra/base.rb#2001
  def call(env); end

  # source://sinatra//lib/sinatra/base.rb#1997
  def helpers; end

  # source://sinatra//lib/sinatra/base.rb#2005
  def inspect; end

  # source://sinatra//lib/sinatra/base.rb#1993
  def settings; end
end
